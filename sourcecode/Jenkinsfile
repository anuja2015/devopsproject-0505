
pipeline {
    agent {
        docker {
            image 'armdevu/maven-jdk-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        APP_NAME = 'sample-spring-boot-app'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_REPOSITORY = "armdevu/${APP_NAME}"
	DOCKER_IMAGE = "${DOCKER_REPOSITORY}:${env.BUILD_ID}"
    }
    stages {
        stage('Cleanup workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout Code') {
            steps {
                echo 'Checking out code from the master branch...'
                git branch: 'master', url: 'https://github.com/anuja2015/devopsproject-0505.git'
            }
        }
        stage('Build') {
            steps {
                echo 'Building the Spring Boot application...'
                dir('sourcecode') {
                sh 'mvn clean package'
                }
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://20.55.25.186:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonar-cred', variable: 'SONAR_AUTH_TOKEN')]) {
                dir('sourcecode') {
                  sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
                }
            }
        }
        stage('Build Docker Image') {
            
            steps {
                echo 'Building the Docker image...'
                dir('sourcecode') {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Push Docker Image') {
            
            steps {
                echo 'Pushing the Docker image to Docker Hub...'
                script {
                     // Define your Docker Hub repository (replace with your actual repo name)
                     //def repository="armdevu"

                    // Tag the image
                    //sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_ID} ${DOCKER_REPOSITORY}:${env.BUILD_ID}"

                    // Push the image to Docker Hub
                    //sh "docker push ${DOCKER_REPOSITORY}:${env.BUILD_ID}"
                        def dockerImage = docker.image("${DOCKER_IMAGE}")
                        docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
            }
                }
            }
        }
        
    }
    post {
        success {
            echo 'Build completed successfully!'
        }
        failure {
            echo 'Build failed. Check the logs for details.'
        }
        //always {
        //    sh "docker logout $DOCKER_REGISTRY"
        //}

    }
}
